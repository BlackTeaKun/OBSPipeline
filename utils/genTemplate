#!/usr/bin/env python3
import argparse
parse = argparse.ArgumentParser()
parse.add_argument('infile')
parse.add_argument('beamin', type=float)
parse.add_argument('beamout', type=float)
parse.add_argument('outname')
args = parse.parse_args()

import healpy as hp
import pickle
import astropy.units as u
import numpy as np
def prepare_deriv(m):
    nside = hp.get_nside(m)
    alm = hp.map2alm(m)
    _, T_t, T_p = hp.alm2map_der1(alm, nside)
    alm = hp.map2alm(T_t)
    _, T_tt, T_tp = hp.alm2map_der1(alm, nside)
    alm = hp.map2alm(T_p)
    _, _, T_pp = hp.alm2map_der1(alm, nside)
    return {
        'T': m,
        'T_t': T_t, 
        'T_p': T_p, 
        'T_tt': T_tt, 
        'T_tp': T_tp, 
        'T_pp': T_pp 
    }

m = hp.read_map(args.infile, (0,1,2))
nside = hp.get_nside(m)

if args.beamin != args.beamout:
    print('resmoothing..')
    beamin  = args.beamin * u.arcmin
    beamout = args.beamout * u.arcmin

    blin = hp.gauss_beam(beamin.to(u.rad).value, lmax=6000)
    blout = hp.gauss_beam(beamout.to(u.rad).value, lmax=6000)

    almt, alme, almb = hp.map2alm(m)
    salmt = hp.almxfl(almt, blout/blin)
    salme = hp.almxfl(alme, blout/blin)
    salmb = hp.almxfl(almb, blout/blin)
    m = hp.alm2map((salmt, salme, salmb), nside)


np.save(f'{args.outname}', m)
dm = prepare_deriv(m[0])
with open(f'{args.outname}_der', 'wb') as f:
    pickle.dump(dm, f)

